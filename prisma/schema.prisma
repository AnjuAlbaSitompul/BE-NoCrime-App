// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique @db.VarChar(50)
  name              String             @db.VarChar(50)
  password          String             @db.VarChar(255)
  role              Role               @default(USER)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  Report            Report[]
  Session           Session?
  NotificationToken NotificationToken?

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String   @unique
  token     String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("sessions")
}

enum Danger {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Type {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(50)
  level     Danger   @default(LOW)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Report    Report[]

  @@map("types")
}

model Report {
  id            Int         @id @default(autoincrement())
  userId        String
  typeId        Int
  subdistrictId Int
  subdistricts  Subdistrict @relation(fields: [subdistrictId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  users         User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  types         Type        @relation(fields: [typeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  latitude      Float       @db.Float
  longitude     Float       @db.Float
  status        Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("reports")
}

model Subdistrict {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(50)
  latitude  Float    @db.Float
  longitude Float    @db.Float
  radius    Int      @db.Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Report    Report[]

  @@map("subdistricts")
}

model NotificationToken {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  token     String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("notification_tokens")
}
